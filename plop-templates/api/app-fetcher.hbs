import axios, {AxiosError, AxiosRequestConfig, AxiosResponse} from 'axios';
import _ from 'lodash';
import Config from 'src/config';
import store, {persistor} from '../redux/store';
import {showError} from 'src/utils/flashMessage';
// import {isIOS} from 'src/utils/device';
import {AnyAction, Dispatch} from 'redux';

export interface IDataError {
  status: string;
  message: string;
  code?: string;
}

interface IError {
  error?: {
    code?: string[];
  };
  status_code?: number;
}

export interface IMetadata {
  time?: string;
  totalPages: number;
  totalItems: number;
  currentPage: number;
}

export interface IDataWithMeta<T> {
  meta: IMetadata;
  data: T;
}

interface IResponseDTO {
  success?: boolean;
  errorCode?: string;
  message?: string;
  meta?: IMetadata;
  data?: any;
}

interface IFetcherOptions {
  token?: string;
  withToken?: boolean;
  withMetadata?: boolean;
  displayError?: boolean;
}

function displayError(dataError: IDataError): void {
  try {
    let errorMessage;
    if (dataError) {
      if (dataError.message) {
        errorMessage = dataError.message;
      } else if (dataError.code) {
        errorMessage = dataError.code;
      }
    } else {
      errorMessage = 'Somethings Wrong';
    }
    showError(errorMessage ?? 'Somethings Wrong');
  } catch (e) {
    showError(_.toString(e));
  }
}

export function fetcher<T>(
  config: AxiosRequestConfig,
  options: IFetcherOptions = {},
): Promise<T> {
  const defaultOptions: IFetcherOptions = {
    withToken: Config.NETWORK_CONFIG.USE_TOKEN,
    withMetadata: Config.NETWORK_CONFIG.WITH_METADATA,
    displayError: Config.NETWORK_CONFIG.DISPLAY_ERROR,
    ...options,
  };

  const apiClient = axios.create({
    headers: {
      'Content-Type': 'application/json',
    },
    baseURL: Config.NETWORK_CONFIG.API_BASE_URL,
    timeout: Config.NETWORK_CONFIG.TIMEOUT,
  });
  const state = store.getState();

  // Access Token
  if (defaultOptions.token) {
    apiClient.defaults.headers.common.Authorization = `Bearer ${defaultOptions.token}`;
  } else {
    if (defaultOptions.withToken) {
      const token = state.userReducer.data?.token;
      if (token) {
        apiClient.defaults.headers.common.Authorization = `Bearer ${token}`;
      }
    }
  }

  return new Promise<never>((resolve, reject) => {
    apiClient
      .request<AxiosResponse<IResponseDTO>>(config)
      .then(async response => {
        if (response.data) {
          if (response.data === undefined) {
            const dataEmpty: IDataError = {
              status: 'ERROR???',
              message: 'Data Empty',
            };
            if (defaultOptions.displayError) {
              displayError(dataEmpty);
            }
            reject(dataEmpty);
            return;
          }
          if (
            response?.data?.error?.errorCode ===
            Config.NETWORK_CONFIG.ERROR_CODE_AUTHEN_TOKEN
          ) {
            console.log('error');
          }
          // @ts-ignore
          resolve(response.data);
          return;
        }
        const dataError: IDataError = {
          status: response.data,
          message: response.data,
        };

        if (defaultOptions.displayError) {
          displayError(dataError);
        }
        console.log('dataError', dataError);
        reject(dataError);
      })
      .catch((error: AxiosError<IError>) => {
        if (axios.isAxiosError(error)) {
          const lostErrorVi =
            'Lost server connection. Please check your internet connection.';
          const somethingsWrong: IDataError = {
            status: 'ERROR???',
            message: lostErrorVi,
            code: '404',
          };
          // @ts-ignore
          const dataError: IDataError =
            error?.response?.data ?? somethingsWrong;

          if (dataError?.message === 'AUTH3001.NotAuthenticated') {
            persistor.purge();
          } else {
            if (defaultOptions.displayError) {
              displayError(dataError);
            }
          }
        } else {
          // Native error
          showError(_.toString(error));
        }
        return reject(error.response?.data);
      });
  });
}